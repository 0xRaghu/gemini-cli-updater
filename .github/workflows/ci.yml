name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14, 16, 18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Test installation
      run: |
        npm link
        gemini-cli-updater --help || true
    
    - name: Test shell integration
      shell: bash
      run: |
        # Test shell detection
        node -e "
          const ShellDetector = require('./lib/shell-detector');
          const detector = new ShellDetector();
          console.log('Detected shell:', detector.detectShell());
          console.log('System info:', JSON.stringify(detector.getSystemInfo(), null, 2));
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Check for vulnerable dependencies
      run: |
        npx better-npm-audit audit --level moderate

  package-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Pack package
      run: npm pack
    
    - name: Test packed package
      run: |
        tar -tzf *.tgz
        npm install -g ./gemini-cli-updater-*.tgz
        gemini-cli-updater --help || true
        npm uninstall -g gemini-cli-updater

  release:
    runs-on: ubuntu-latest
    needs: [test, security, package-test]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build package
      run: npm run build --if-present
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release Assets
      run: |
        npm pack
        mv gemini-cli-updater-*.tgz gemini-cli-updater.tgz
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./gemini-cli-updater.tgz
        asset_name: gemini-cli-updater.tgz
        asset_content_type: application/gzip

  cross-platform-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        shell: [bash, powershell]
        exclude:
          # Exclude bash on Windows (use Git Bash or WSL if needed)
          - os: windows-latest
            shell: bash
          # Exclude PowerShell on Linux/macOS (unless installed separately)
          - os: ubuntu-latest
            shell: powershell
          - os: macos-latest
            shell: powershell
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test shell detection
      shell: ${{ matrix.shell }}
      run: |
        node -e "
          const ShellDetector = require('./lib/shell-detector');
          const detector = new ShellDetector();
          console.log('OS:', process.platform);
          console.log('Shell detected:', detector.detectShell());
          console.log('Config file:', detector.getShellConfigFile());
        "